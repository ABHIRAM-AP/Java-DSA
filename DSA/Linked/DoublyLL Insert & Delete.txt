#include<stdio.h>
#include<stdlib.h>


struct Node{
    int data;
    struct Node *next;
    struct Node *prv;
    
};

struct Node *GetNode();
struct Node *GetNode()
{
    struct Node *N=(struct Node *)malloc(sizeof(struct Node));
    return N;
}

struct Node *InsertDLFront(struct Node*,int);
struct Node *InsertDLFront(struct Node*head,int data)
{
   
    struct Node *newNode=GetNode();
   
    if(newNode == NULL)
    {
        printf("Insufficient Memory\n");
    }
    else{
        newNode->data=data;
        newNode->next=head;
        newNode->prv=NULL;
     if(head==NULL)
        {
        head=newNode;
        
        }
        else{
            newNode->next=head;
            head->prv=newNode;
            head=newNode;
        
            }
        }
    return head;
}

struct Node *InsertDLRear(struct Node *,int);
struct Node *InsertDLRear(struct Node *head,int data)
{
    struct Node *temp=head;
    struct Node *newNode=GetNode();
    
    if(newNode == NULL)
    {
        printf("Insufficient Memory\n");
    }
    else 
    {
        newNode->data=data;
        newNode->next=NULL;
        newNode->prv=NULL;
        
    if(head == NULL) {
        return newNode;  
    }
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newNode;
        newNode->prv=temp;
    }
    return head;
}

struct Node *InsertDLRandom(struct Node *,int ,int);
struct Node *InsertDLRandom(struct Node *head,int key,int data)
{
    struct Node *newNode=GetNode();
    struct Node *ptr=head;
    if(newNode!=NULL)
    {
        newNode->data=data;
        newNode->next=NULL;
        newNode->prv=NULL;
        
        while(ptr->data!=key && ptr->next!=NULL)
        {
            ptr=ptr->next;
        }
        if(ptr->data==key)
        {
            ptr->next->prv=newNode;
            newNode->next=ptr->next;
            ptr->next=newNode;
            newNode->prv=ptr;
        }
        else{
            ptr->next=newNode;
        }
    }
    else{
        printf("Allocation Failed\n");
    }
    return head;
}

struct Node *DeleteDLFront(struct Node* ,int*);
struct Node *DeleteDLFront(struct Node* head,int*del)
{
    struct Node *temp=head;
    if(head==NULL)
    {
         printf("Empty List\n");
         *del=-1;
         return NULL;
    }

        *del=temp->data;
        head=temp->next;
        
        if(head!=NULL)
        {
            head->prv=NULL;
        }
        free(temp);
   
    return head;
}


struct Node *DeleteDLRear(struct Node* ,int*);
struct Node *DeleteDLRear(struct Node* head,int*del)
{
    struct Node *temp=head;
    if(head==NULL)
    {
        printf("Empty List\n");
        *del=-1;
        return NULL;
    }
   
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    *del=temp->data;
   
     if (temp->prv != NULL) {
       
        temp->prv->next = NULL;
    } 
    else {
        head = NULL;
    }
    free(temp);
    
    return head;
}


struct Node *DeleteDLRandom(struct Node *head, int key, int *del) {
    struct Node *ptr = head;

    if (head == NULL) {
        printf("List is empty\n");
        *del = -1;
        return NULL;
    }

    // Traverse to find the node with the specified key
    while (ptr != NULL && ptr->data != key) {
        ptr = ptr->next;
    }

    // If the key node is found and has a next node
    if (ptr != NULL && ptr->next != NULL) {
        struct Node *temp = ptr->next;  // Node to be deleted
        *del = temp->data;             // Store the data of the node to be deleted

        ptr->next = temp->next;        // Bypass the deleted node
        
        if (temp->next != NULL) {
            temp->next->prv = ptr;     // Update the previous pointer of the next node
        }

        free(temp);                    // Free the memory of the deleted node
    } 
    else {
        // If the key node is not found or there is no node after the key
        printf("No node to delete after the key\n");
        *del = -1;  // Indicate that nothing was deleted
    }

    return head;
}


void display(struct Node *);
void display(struct Node *head)
{
	struct Node *temp=head;
	if(temp!=NULL)
	{
while(temp!=NULL)
{
	printf("%d\t",temp->data);
    temp=temp->next;
}
printf("\n");
}
else
{
    printf("Empty List\n");
}

}



int main()
{
    int data=0;
    int key=0;
    int choice=0;
    int deleted_Item=0;
    struct Node *head=NULL;
    while(choice!=8)
    {
        printf("Enter your choice:\n1->Insert Front \n2->Insert Rear\n3->Insert Random\n4->Delete Front\n5->Delete Rear\n6->Delete Random\n7->Display\n8->Exit:");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
                printf("Enter the data:");
                scanf("%d",&data);
                head=InsertDLFront(head,data);
                break;
            
            case 2:
                printf("Enter the data:");
                scanf("%d",&data);
                head=InsertDLRear(head,data);
                break;
                
            case 3:
                printf("Enter the key:");
                scanf("%d",&key);
                printf("Enter the data:");
                scanf("%d",&data);
                head=InsertDLRandom(head,key,data);
                break;
            
            
             case 4:
                head=DeleteDLFront(head,&deleted_Item);
                if(deleted_Item!=-1)
                {
                    printf("Deleted Item:%d\n",deleted_Item);
                }
                break;
                
                
             case 5:
                head = DeleteDLRear(head,&deleted_Item);
                 if(deleted_Item!=-1)
                {
                    printf("Deleted Item:%d\n",deleted_Item);
                }
                break;
            case 6:
                printf("Enter the key:");
                scanf("%d",&key);
                head=DeleteDLRandom(head,key,&deleted_Item);
                if(deleted_Item!=-1)
                {
                    printf("Deleted Item:%d\n",deleted_Item);
                }
                break;
                
            
            case 7:
                display(head);
                break;
                
            case 8:
            printf("Exited\n");
            break;
            
            default:printf("Invalid Choice\n");
        }
    }
   


    }