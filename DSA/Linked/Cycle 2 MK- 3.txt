#include<stdio.h>
#include<stdlib.h>


struct Node
{
    int data;
    struct Node*next;
};


struct Node* GetNode();
struct Node* GetNode()
{
    struct Node *N = (struct Node*)malloc(sizeof(struct Node));
}

struct Node *InsertFront(struct Node* , int );
struct Node *InsertFront(struct Node* head, int data)
{
   struct Node* newNode = GetNode();
    if(newNode == NULL)
    {
        printf("Insufficient Memory\n");
    }
    else
    {
        newNode->data=data;
        newNode->next=head;
        head=newNode;
    }
    return head;
}


struct Node *InsertRear(struct Node *,int);
struct Node *InsertRear(struct Node *head,int data)
{
    struct Node *newNode = GetNode();
    if(newNode ==NULL)
    {
        printf("Insufficient Memory\n");
    }
    else if(head==NULL)
    {
         newNode->data=data;
        newNode->next=NULL;
        head=newNode;
    }
    else
    {
        struct Node *ptr=head;
        while(ptr->next!=NULL)
        {
            ptr=ptr->next;
        }
        newNode->data=data;
        newNode->next=NULL;
        ptr->next=newNode;
    }
    return head;
}

struct Node *DeleteFront(struct Node*);
struct Node *DeleteFront(struct Node *head){
    struct Node *ptr=GetNode();
    
    if(head==NULL)
    {
        printf("Empty List\n");
    }
    else
    {
        ptr=head;
        head=ptr->next;
        int data= ptr->data;
        printf("%d\n",data);
        free(ptr);
    }
    return head;
    
}


struct Node *DeleteRear(struct Node *);
struct Node *DeleteRear(struct Node *head)
{
    struct Node *p1,*p2;
    if(head == NULL)
    {
        printf("Empty List");
    }
    else if(head->next==NULL)
    {
        return head;
    }
    else
    {
        p1=head;
        p2=head;
        
        while(p1->next!=NULL)
        {
            p2=p1;
            p1=p1->next;
        }
        p2->next=NULL;
        return head;
    }
}




struct Node *display(struct Node*);
struct Node *display(struct Node *head)
{
    struct Node*ptr;
        ptr=head;
        if(ptr!=NULL)
        {
            while(ptr!=NULL)
            {
                printf("%d\t",ptr->data);
                ptr=ptr->next;
            } 
        }
            else
            {
                printf("Empty List\n");
            }
}

int main()
{
    int option=0,item=0;
   
   struct Node *head;
   

  
    while(option!=8)
    {
         printf("Enter operation:\n1->Insert Front\n2->Insert Rear\n3->Insert Random\n4->Delete Front\n5->Delete Rear\n6->Delete Random\n7->Display List\n8->Exit\n");
    scanf("%d",&option);
    
    
    switch(option)
    {
        case 1:
            printf("Enter the item:");
            scanf("%d",&item);
            head=InsertFront(head,item);
        break;
        
        case 2:
            printf("Enter the item:");
            scanf("%d",&item);
            head=InsertRear(head,item);
            break;
            
        case 3:
            InsertRandom();
            break;
        case 4:
            head=DeleteFront(head);
            break;
        
        case 5:
            head = DeleteRear(head);
            printf("%d\n",head->data);
            break;
            
            
        case 6:
            DeleteRandom();
        break;
            
            
        case 7:
            display(head);
            break;
    }
    
    }
}