#include<stdio.h>
#include<stdlib.h>

#define MAXSIZE 20

struct Node{
    int data;
    struct Node *next;
};
typedef struct {
    int a[MAXSIZE];
    int top;
}Stack;

int isFull(Stack *stack)
{
    if(stack->top == MAXSIZE -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int isEmpty(Stack*stack)
{
    if(stack->top==-1)
    {
        return 1;
    }
    else{
        return 0;
    }
}

void push(Stack *stack, int item) {
    if (isFull(stack)) {
        printf("Stack Overflow\n");
    } else {
        stack->a[++stack->top] = item;
    }
}
int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
       
    }
    return stack->a[stack->top--];
}


struct Node *GetNode()
{
    struct Node *N=(struct Node *)malloc(sizeof(struct Node));
    return N;
}

struct Node *create(int);
struct Node *create(int n)
{
    struct Node *head=NULL;
    struct Node *temp;
    struct Node *newNode;
    
    int data,i=0;
    
    for(i=0;i<n;i++)
    {
        printf("Enter data:");
        scanf("%d",&data);
        
        newNode=GetNode();
        if(newNode==NULL)
        {
            printf("failed\n");
        }
        
        newNode->data=data;
        newNode->next=NULL;
        
        
        
        if(head==NULL){
            head=newNode;
        }
        else
        {
            temp->next=newNode;
        }
         temp=newNode;
    }
    return head;
}
void display(struct Node *);
void display(struct Node *head)
{
	struct Node *temp=head;
while(temp!=NULL)
{
	printf("%d\t",temp->data);
    temp=temp->next;
}

}

struct Node *Rotate(struct Node*head)
{
    Stack S;
    S.top=-1;
    struct Node*ptr=head;
    while(ptr!=NULL)
    {
        push(&S,ptr->data);
        ptr=ptr->next;
    }
    ptr=head;
    while(!isEmpty(&S))
    {
       ptr->data= pop(&S);
        ptr=ptr->next;
    }
    return head;
}



int main()
{
    struct Node *head=NULL;
   
    int n=0;
    printf("Enter the number of nodes you want:\n");
    scanf("%d",&n);
    head = create(n);

    struct Node *head2=Rotate(head);
    display(head2);
    
}