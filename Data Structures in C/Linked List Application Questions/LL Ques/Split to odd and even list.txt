#include<stdio.h>
#include<stdlib.h>


struct Node{
    int data;
    struct Node *next;
};

struct Node *GetNode();
struct Node *GetNode()
{
    struct Node *N=(struct Node *)malloc(sizeof(struct Node));
    return N;
}

struct Node *create(int);
struct Node *create(int n)
{
    struct Node *head=NULL;
    struct Node *temp;
    struct Node *newNode;
    
    int data,i=0;
    
    for(i=0;i<n;i++)
    {
        printf("Enter data:");
        scanf("%d",&data);
        
        newNode=GetNode();
        if(newNode==NULL)
        {
            printf("failed\n");
        }
        
        newNode->data=data;
        newNode->next=NULL;
        
        
        
        if(head==NULL){
            head=newNode;
        }
        else
        {
            temp->next=newNode;
        }
         temp=newNode;
    }
    return head;
}
void split(struct Node *);
void split(struct Node *head)
{
    struct Node *L_Odd=NULL;
    struct Node *L_Even=NULL;
    struct Node *ptr=head;
    int pos=1;
    struct Node *t1=NULL;
    struct Node *t2=NULL;

    
    while(ptr!=NULL)
    {
        struct Node *newNode = GetNode();
        newNode->data = ptr->data;
        newNode->next = NULL;
        
        if(pos % 2 ==1)
        {
        if(L_Odd==NULL)
        {
            L_Odd=newNode;
            t1=L_Odd;
        }
        else{
            t1->next=newNode;
            t1=newNode;
        }
        }
        else{
         if(L_Even==NULL)
        {
            L_Even=newNode;
            t2=L_Even;
        }
        else{
            t2->next=newNode;
            t2=newNode;
        }
    }
    ptr=ptr->next;
    pos++;
    }
    display(L_Odd);
    printf("\n\n\n");
    display(L_Even);
}

void display(struct Node *);
void display(struct Node *head)
{
	struct Node *temp=head;
while(temp!=NULL)
{
	printf("%d\t",temp->data);
    temp=temp->next;
}

}
int main()
{
    struct Node *head=NULL;
    int n=0;
    printf("Enter the number of nodes you want:\n");
    scanf("%d",&n);
    
    
    head = create(n);
    split(head);

    
}