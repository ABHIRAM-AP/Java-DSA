#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define MAXSIZE 1000 

void createArray(int a[], int size) {
    for (int i = 0; i < size; i++) {
        a[i] = rand() % 1000;
    }
}

// Function to copy array
void copyArray(int src[], int dest[], int size) {
    for (int i = 0; i < size; i++) {
        dest[i] = src[i];
    }
}

/*********************Insertion Sort************************/
void insertionSort(int a[], int size) {
    for (int i = 0; i < size; i++) {
        int key = a[i];
        int j = i - 1;
        while (j >= 0 && a[j] > key) {
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = key;
    }
}

/*********************Selection Sort************************/
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void selectionSort(int a[], int size) {
    for (int i = 0; i < size; i++) {
        int minIndex = i;
        for (int j = i + 1; j < size; j++) {
            if (a[j] < a[minIndex]) {
                minIndex = j;
            }
        }
        swap(&a[minIndex], &a[i]);
    }
}

/*********************Quick Sort************************/
int partition(int a[], int low, int high) {
    int pivot = a[low];
    int i = low + 1; // Start from the next element
    int j = high;

    while (i <= j) {
        while (i <= high && a[i] <= pivot) {
            i++;
        }
        while (j >= low && a[j] > pivot) {
            j--;
        }
        if (i < j) {
            swap(&a[i], &a[j]);
        }
    }
    swap(&a[low], &a[j]);
    return j;
}

void quickSort(int a[], int low, int high) {
    if (low < high) {
        int pIndex = partition(a, low, high);
        quickSort(a, low, pIndex - 1);
        quickSort(a, pIndex + 1, high);
    }
}

/*********************Heap Sort************************/
void maxHeapify(int a[], int i, int n) {
    int largest = i;  
    int left = 2 * i + 1; // Left child index
    int right = 2 * i + 2; // Right child index

    if (left < n && a[left] > a[largest]) { 
        largest = left;
    }
    if (right < n && a[right] > a[largest]) { 
        largest = right;
    }
    if (largest != i) {
        swap(&a[i], &a[largest]);
        maxHeapify(a, largest, n);  
    }
}

void buildMaxHeap(int a[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--) { 
        maxHeapify(a, i, n);
    }
}

void heapSort(int a[], int n) {
    buildMaxHeap(a, n);
    for (int i = n - 1; i > 0; i--) { 
        swap(&a[0], &a[i]); // Swap root with last element
        maxHeapify(a, 0, i);  
    }
}

/*********************Merge Sort************************/
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

/*********************Print Array************************/
void printArray(int a[], int size) {
    for (int i = 0; i < 10; i++) {
        printf("%d\t", a[i]);
    }
    printf("\n");
}

int main() {
    srand(time(0)); // Move the srand here to ensure random numbers each time
    int choice = 0;
    int original[MAXSIZE];
    int a[MAXSIZE];

    createArray(original, MAXSIZE);

    while (choice != 6) {
        printf("Enter choice:\n1 - Insertion Sort\n2 - Selection Sort\n3 - Quick Sort\n4 - Heap Sort\n5 - Merge Sort\n6 - Exit\n");
        scanf("%d", &choice);
        
        clock_t start = 0, end = 0;
        double time_taken = 0;
        
        switch (choice) {
            case 1:
                copyArray(original, a, MAXSIZE);
                start = clock(); 
                insertionSort(a, MAXSIZE);
                end = clock();   
                time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
                printArray(a, MAXSIZE);
                printf("Time taken for Insertion sort: %f seconds\n", time_taken);
                break;
                
            case 2:
                copyArray(original, a, MAXSIZE);
                start = clock();
                selectionSort(a, MAXSIZE);
                end = clock();
                time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
                printArray(a, MAXSIZE);
                printf("Time taken for Selection sort: %f seconds\n", time_taken);
                break;
            
            case 3:
                copyArray(original, a, MAXSIZE);
                start = clock();
                quickSort(a, 0, MAXSIZE - 1);
                end = clock();
                time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
                printArray(a, MAXSIZE);
                printf("Time taken for Quick sort: %f seconds\n", time_taken);
                break;
            
            case 4:
                copyArray(original, a, MAXSIZE);
                start = clock();
                heapSort(a, MAXSIZE);
                end = clock();
                time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
                printArray(a, MAXSIZE);
                printf("Time taken for Heap sort: %f seconds\n", time_taken);
                break;
                
            case 5:
                copyArray(original, a, MAXSIZE);
                start = clock();
                mergeSort(a, 0, MAXSIZE - 1);
                end = clock();
                time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
                printArray(a, MAXSIZE);
                printf("Time taken for Merge sort: %f seconds\n", time_taken);
                break;

            case 6:
                printf("Exited..\n");
                break;
                
            default:
                printf("Invalid choice\n");
                break;
        }
    }

    return 0;
}
